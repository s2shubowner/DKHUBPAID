local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Ro Services v1 | Streetz Wars 2",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Loading...",
   LoadingSubtitle = "by DK",
   Theme = "Serenity", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = true,
   DisableBuildWarnings = true, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "dkshub", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Ro-key System",
      Subtitle = "Enter Key",
      Note = "Buy Key At Discord.gg/dkshub", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/q1r3esnP"}
   }
})

local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image
local MainSection = MainTab:CreateSection("Game Info")

local Paragraph = MainTab:CreateParagraph({Title = "Game Name", Content = "[VALENTINESðŸ’ž] Streetz War 2"})
local Paragraph = MainTab:CreateParagraph({Title = "Game id", Content = "11177482306"})

local MainSection = MainTab:CreateSection("Developer")
local Paragraph = MainTab:CreateParagraph({Title = "devs", Content = "Theyfwdk0"})

local AutofarmTab = Window:CreateTab("Autofarm", 4483362458) -- Title, Image
local AutofarmSection = AutofarmTab:CreateSection("Mop Autofarm")


local Toggle = AutofarmTab:CreateToggle({
    Name = "Mop Autofarm",
    CurrentValue = false,
    Flag = "MopAutofarm",
    Callback = function(state)
        _G.automopfarm = state
        while _G.automopfarm do
            for i, v in pairs(game.Workspace.CleanPart:GetChildren()) do
                if v.ProximityPrompt.Enabled == true then
                    game:GetService("ReplicatedStorage").GiveMop:FireServer()
                    v.ProximityPrompt.HoldDuration = 1
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 2, 0)
                    wait(1)
                    fireproximityprompt(v.ProximityPrompt, v.ProximityPrompt.HoldDuration, false)
                    wait(v.ProximityPrompt.HoldDuration + 2.2)
                end
            end
        end
    end
})

local Section = AutofarmTab:CreateSection("Box Autofarm")

local Toggle = AutofarmTab:CreateToggle({
    Name = "Box Autofarm",
    CurrentValue = false,
    Flag = "BoxAutofarm",
    Callback = function(state)
        _G.autoboxfarm = state

        task.spawn(function()
            while _G.autoboxfarm do
                local oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                
                -- Move to the box location
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Job.Box.BOX1.CFrame
                wait(0.5)
                
                -- Pick up the box
                fireclickdetector(game.Workspace.Job.Box.BOX1.ClickDetector)
                wait(0.2)
                
                -- Move back to the old position
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
                
                -- Equip the box
                game.Players.LocalPlayer.Backpack:WaitForChild("Box").Parent = game.Players.LocalPlayer.Character
                
                -- Drop the box at the job area
                firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 0)
                wait()
                firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 1)
                
                -- Wait for the job cooldown
                wait(15)
            end
        end)
    end
})

local AutofarmSection = AutofarmTab:CreateSection("Anti Afk")

local Button = AutofarmTab:CreateButton({
   Name = "Anti Afk",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local CardTab = Window:CreateTab("Card", 4483362458) -- Title, Image
local CardSection = CardTab:CreateSection("Card Dupe")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

local dupeAmount = 10

-- Textbox for Duplication Amount
local inputField = CardTab:CreateInput({
    Name = "Enter Card Dupe Amount",
    PlaceholderText = "10",
    RemoveTextAfterFocusLost = false,
    Flag = "DupeAmount",
    Callback = function(value)
        dupeAmount = tonumber(value) or 10
        if dupeAmount <= 0 then
            dupeAmount = 10  -- Fallback value
        end
    end
})

-- Button to Start Duplication
local startButton = CardTab:CreateButton({
    Name = "Start Duplication",
    Text = "Start Duplication",
    Callback = function()
        if dupeAmount <= 0 then
            notify("Invalid dupe amount!", 5, "Error")
            return
        end

        -- Duplication Function
        startDuplication()
    end
})

-- Duplication Function
local function startDuplication()
    -- Start the duplication process
    notify("Buying cards & laptops...", 5, "Info")

    -- Open Dealer UI
    fireclickdetector(game.Workspace["Streetz War"].Anonymous.ClickDetector)
    wait(2) -- Wait to ensure the UI is open
    player.PlayerGui:WaitForChild("DealerGui")
    local shopGui = player.PlayerGui.DealerGui.ShopFrame
    shopGui.Visible = true
    player.PlayerGui.DealerGui.Frame.Visible = false
    game:GetService("RunService"):Set3dRenderingEnabled(false)

    -- Position player correctly
    repeat wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    player.Character.HumanoidRootPart.CFrame = CFrame.new(-55, 4.5, 170)

    wait(0.5)

    -- Click buttons for purchasing
    local cardButton = shopGui["Blank Card"]
    local laptopButton = shopGui["laptop"]

    for i = 1, dupeAmount do
        task.wait()
        -- Click the card button
        if cardButton.Visible then
            local cardPos = cardButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, false, game, 0)
        end

        task.wait(0.1)

        -- Click the laptop button
        if laptopButton.Visible then
            local laptopPos = laptopButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, false, game, 0)
        end
    end

    game:GetService("RunService"):Set3dRenderingEnabled(true)

    -- Close the UI
    local exitButton = shopGui.exit
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, true, game, 0)
    wait()
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, false, game, 0)

    -- Move player to next step
    player.Character.HumanoidRootPart.CFrame = CFrame.new(954, 4.7, -61)
    wait(4)

    -- Process Laptops
    local laptopCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Laptop" then
            laptopCount = laptopCount + 1
        end
    end

    for i = 1, laptopCount - 1 do
        spawn(function()
            local args = { true, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(4)
    player.Backpack.Laptop.Parent = player.Character
    wait(4)

    -- Process Cards
    local cardCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Loaded Card" then
            cardCount = cardCount + 1
        end
    end

    for i = 1, cardCount do
        spawn(function()
            local args = { false, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(1)
    notify("Duplication Complete!", 5, "Info")
    player.Character.Humanoid:UnequipTools()
end

-- Notification function with error handling
local function notify(message, time, type)
    local success, err = pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = type or "Info",
            Text = message,
            Duration = time or 5,
        })
    end)

    if not success then
        warn("Notification failed: " .. err)
    end
end

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image
local PlayerSection = PlayerTab:CreateSection("Speed")

local Slider = PlayerTab:CreateSlider({
   Name = "Walkspeed",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local PlayerSection = PlayerTab:CreateSection("Jump Power")

local Slider = PlayerTab:CreateSlider({
   Name = "JumpPower",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Height",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

local Toggle = PlayerTab:CreateToggle({
   Name = "Inf Jump",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        local InfiniteJumpEnabled = true
game:GetService("UserInputService").JumpRequest:connect(function()
if InfiniteJumpEnabled then
game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
end
end)
   end,
})

local PlayerSection = PlayerTab:CreateSection("fly")

local Toggle = PlayerTab:CreateToggle({
   Name = "enable fly",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
   end,
})

local Slider = PlayerTab:CreateSlider({
   Name = "Fly Speed",
   Range = {0, 200},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the slider changes
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   end,
})

local TeleportsTab = Window:CreateTab("Teleports", 4483362458) -- Title, Image
local TeleportsSection = TeleportsTab:CreateSection("Main Teleports")

-- Create a list of teleport options
local teleportOptions = {
    {Name = "Apartment 1", Position = CFrame.new(4, 4, 50)},
    {Name = "Apartment 2", Position = CFrame.new(2570, 4, -107)},
    {Name = "Gun Store", Position = CFrame.new(-276, 4, 30)},
    {Name = "Dealership", Position = CFrame.new(842, 5, -6)},
    {Name = "Pharmacy", Position = CFrame.new(42, 5, -258)},
    {Name = "Bank", Position = CFrame.new(-535, 5, -347)},
    {Name = "Cap Store", Position = CFrame.new(-159, 5, 8)},
    {Name = "Shit/Pant Store", Position = CFrame.new(-125, 5, 38)},
    {Name = "Chain Store", Position = CFrame.new(39, 5, -232)},
    {Name = "Boxing Gym", Position = CFrame.new(258, 5, -99)},
}

-- Create the dropdown menu for teleportation
local dropdown = TeleportsTab:CreateDropdown({
    Name = "Select a Teleport",
    Options = {},
    Callback = function(selectedTeleport)
        -- Find the corresponding teleport location based on selection
        for _, teleport in ipairs(teleportOptions) do
            if teleport.Name == selectedTeleport then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = teleport.Position
                break
            end
        end
    end
})

-- Add teleport options to the dropdown
for _, teleport in ipairs(teleportOptions) do
    dropdown:AddOption(teleport.Name)
end

-- Dealer Teleports Section
local TeleportsSection = TeleportsTab:CreateSection("Dealer Teleports")
local dealerTeleports = {
    {Name = "Card Dealer", Position = CFrame.new(226, 4, -543)},
    {Name = "Illeagal Dealer", Position = CFrame.new(-142, 5, 190)},
}

-- Create a second dropdown for Dealer teleports
local dealerDropdown = TeleportsTab:CreateDropdown({
    Name = "Select Dealer Teleport",
    Options = {},
    Callback = function(selectedTeleport)
        for _, teleport in ipairs(dealerTeleports) do
            if teleport.Name == selectedTeleport then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = teleport.Position
                break
            end
        end
    end
})

for _, teleport in ipairs(dealerTeleports) do
    dealerDropdown:AddOption(teleport.Name)
end

-- Job Teleports Section
local TeleportsSection = TeleportsTab:CreateSection("Job Teleports")
local jobTeleports = {
    {Name = "Mop Job", Position = CFrame.new(-102, 5, 20)},
    {Name = "Pizza Job", Position = CFrame.new(163, 5, 49)},
    {Name = "Box Job", Position = CFrame.new(-118, 5, 300)},
}

-- Create a third dropdown for Job teleports
local jobDropdown = TeleportsTab:CreateDropdown({
    Name = "Select Job Teleport",
    Options = {},
    Callback = function(selectedTeleport)
        for _, teleport in ipairs(jobTeleports) do
            if teleport.Name == selectedTeleport then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = teleport.Position
                break
            end
        end
    end
})

for _, teleport in ipairs(jobTeleports) do
    jobDropdown:AddOption(teleport.Name)
end

local teleportsSection = TeleportsTab:CreateSection("teleport to player")

local function teleportToPlayer(player)
    local char = game.Players.LocalPlayer.Character
    if char then
        -- Position the local player at the selected player's position
        char:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame)
    end
end

local Dropdown = TeleportsTab:CreateDropdown({
    Name = "Select Player",
    List = {},  -- We will populate this list with player names
    Callback = function(selectedPlayer)
        -- Find the player from the selected name and teleport
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player.Name == selectedPlayer then
                teleportToPlayer(player)
                break
            end
        end
    end
})

-- Populate the dropdown with the current players in the game
local function updatePlayerList()
    local playerNames = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    playersDropdown:SetList(playerNames)
end

-- Update the dropdown when a player joins or leaves
game.Players.PlayerAdded:Connect(updatePlayerList)
game.Players.PlayerRemoving:Connect(updatePlayerList)

-- Initial update of the player list when the script is first run
updatePlayerList()

local GunTab = Window:CreateTab("Gun", 4483362458) -- Title, Image
local GunSection = GunTab:CreateSection("Weapon Features")

local Toggle = GunTab:CreateToggle({
    Name = "Inifinite Ammo",
    CurrentValue = false,
    Flag = "InfiniteAmmo",
    Callback = function(state)
        _G.infiniteAmmo = state

        task.spawn(function()
            while _G.infiniteAmmo do
                local player = game.Players.LocalPlayer
                local tool = player.Character and player.Character:FindFirstChildOfClass("Tool")

                if tool and tool:FindFirstChild("Stuff") then
                    local ammoValues = tool.Stuff.Values
                    ammoValues.CurrentAmmo.MaxValue = math.huge
                    ammoValues.StoredAmmo.MaxValue = math.huge
                    ammoValues.CurrentAmmo.Value = math.huge
                    ammoValues.StoredAmmo.Value = math.huge
                end

                task.wait(0.5) -- Prevents excessive loops
            end
        end)
    end
})


local Toggle = GunTab:CreateToggle({
   Name = "Godmode Self",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        local player = game.Players.LocalPlayer
        local character = player.Character
        if character and character:FindFirstChild("UpperTorso") and character:FindFirstChild("RightHand") then
            local fist = player.Backpack:FindFirstChild("Fist")
            if fist and fist:FindFirstChild("Script") then
                local script = fist.Script
                if script:FindFirstChild("egma") and script:FindFirstChild("legma") then
                    script.egma:FireServer(character.UpperTorso, -math.huge, character.RightHand)
                    script.legma:FireServer(character.UpperTorso, -math.huge, character.RightHand)
                    Rayfield:Notify({
                        Title = "Success",
                        Content = "God Mode Activated!",
                        Duration = 4,
                        Image = 4483362458,
                        Actions = {}
                    })
                else
                    Rayfield:Notify({
                        Title = "Error",
                        Content = "Required scripts not found!",
                        Duration = 4,
                        Image = 4483362458,
                        Actions = {}
                    })
                end
            else
                Rayfield:Notify({
                    Title = "Error",
                    Content = "Fist tool not found!",
                    Duration = 4,
                    Image = 4483362458,
                    Actions = {}
                })
            end
        else
            Rayfield:Notify({
                Title = "Error",
                Content = "Character parts missing!",
                Duration = 4,
                Image = 4483362458,
                Actions = {}
            })
        end
    end
})

local Toggle = GunTab:CreateToggle({
   Name = "Unlock Firerate",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        local referencemodule = game.ReplicatedStorage.Assets.Tools:FindFirstChild("Custom GD")

-- Check if the reference module exists
if not referencemodule then
    Rayfield:Notify({
        Title = "Error",
        Content = "Reference module not found!",
        Duration = 4,
        Image = 4483362458,
        Actions = {}
    })
    return
end

-- Loop through all tools and clone the reference module
for _, v in pairs(game.ReplicatedStorage.Assets.Tools:GetChildren()) do
    local newv = referencemodule:Clone()
    newv.Parent = game.ReplicatedStorage.Assets.Tools
    newv.Name = v.Name

    -- Remove existing "Sounds" if any, and transfer from the old tool
    local existingSounds = newv:FindFirstChild("Sounds")
    if existingSounds then
        existingSounds:Destroy()
    end

    local oldSounds = v:FindFirstChild("Sounds")
    if oldSounds then
        oldSounds.Parent = newv
    end

    -- Destroy the old tool
    v:Destroy()
end

-- This global variable tracks whether the tool name is being fixed
_G.FixingName = true

-- Continuously check for tool change and update UI
while _G.FixingName do
    task.wait()

    local player = game.Players.LocalPlayer
    local character = player.Character
    if character then
        local tool = character:FindFirstChildOfClass("Tool")
        if tool then
            local gunStatsUI = player.PlayerGui:FindFirstChild("GunUI") and player.PlayerGui.GunUI:FindFirstChild("GunStats")
            if gunStatsUI then
                local weaponText = gunStatsUI:FindFirstChild("Weapon")
                if weaponText then
                    weaponText.Text = "Modded " .. tool.Name
                end
            end
        end
    end
end

   end,
})


local Toggle = GunTab:CreateToggle({
   Name = "Gun Dupe",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        local safeZones = game.Workspace.SafeZones:GetChildren()
        
        local closestSafeZone = nil
        local shortestDistance = math.huge 

        for _, safeZone in ipairs(safeZones) do
            local distance = (humanoidRootPart.Position - safeZone.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestSafeZone = safeZone
            end
        end
        
        if closestSafeZone then
            humanoidRootPart.CFrame = closestSafeZone.CFrame
            character.Humanoid:ChangeState(Enum.HumanoidStateType.Dead) 
        else
            warn("No safe zones found.")
        end
    end
})

local VisualsTab = Window:CreateTab("Visuals", 4483362458) -- Title, Image
local VisualsSection = VisualsTab:CreateSection("Tool Stealing")

local Toggle = VisualsTab:CreateToggle({
   Name = "tool stealing",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        _G.ToolStealing = state

task.spawn(function()
    while _G.ToolStealing do
        local player = game.Players.LocalPlayer
        local character = player and player.Character or nil
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")

        if humanoid then
            for _, tool in pairs(workspace:GetChildren()) do
                if tool:IsA("Tool") and tool:FindFirstChild("Handle") then
                    firetouchinterest(character.HumanoidRootPart, tool.Handle, 0)
                    task.wait(0.1)
                    firetouchinterest(character.HumanoidRootPart, tool.Handle, 1)
                end
            end
        end
        
        task.wait(1) -- Prevents excessive looping
    end
end)

   end,
})


local hitboxColor = Color3.fromRGB(255, 255, 255)  -- Default color

local Slider = VisualsTab:CreateSlider({
    Name = "Hitbox Size",
    Range = {2, 30},
    Increment = 1,
    Suffix = "HBES",
    CurrentValue = 2,
    Flag = "HitboxSize",
    Callback = function(size)
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player ~= game.Players.LocalPlayer then
                local hrp = player.Character:FindFirstChild("HumanoidRootPart")
                if hrp then
                    hrp.Size = Vector3.new(size, size, size)
                    hrp.Transparency = 0.8
                    hrp.BrickColor = BrickColor.new(hitboxColor)  -- Use the correct property for color
                    hrp.CanCollide = false
                end
            end
        end
    end
})

local ColorPicker = VisualsTab:CreateColorPicker({
    Name = "Hit Box Color",
    Color = Color3.fromRGB(255,255,255),
    Flag = "ColorPicker1", -- A flag is the identifier for the configuration file
    Callback = function(Value)
        -- The function that takes place every time the color picker is moved/changed
        hitboxColor = Value  -- Update the hitbox color with the selected color
    end
})

local EspTab = Window:CreateTab("Esp", 4483362458) -- Title, Image
local EspSection = EspTab:CreateSection("Esp Features")

local Toggle = EspTab:CreateToggle({
   Name = "Name Tag Esp",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
         _G.ESPVisible = value

        -- Optional: Send a notification when the visibility changes
        if _G.SendNotifications then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Exunys Developer",
                Text = "The ESP's visibility is now set to " .. tostring(_G.ESPVisible) .. ".",
                Duration = 5
            })
        end
    end
})

-- Optional: Add more UI elements (like text size, team check, etc.) for customization

-- Create other ESP settings (e.g., Text Size)
local TextSizeSlider = ESPSection:CreateSlider({
    Name = "Text Size",
    Min = 10,
    Max = 30,
    Default = _G.TextSize,
    Increment = 1,
    Callback = function(value)
        _G.TextSize = value
    end
 })

local MiscTab = Window:CreateTab("Misc", 4483362458) -- Title, Image
local MiscSection = MiscTab:CreateSection("Fps/Lag")

local Button = MiscTab:CreateButton({
   Name = "Fps Boost",
   Callback = function()
        -- Settings
local Settings = _G.FPS_Settings or {
    Graphics = true,
    Lighting = true,
    Texture = true,
    Terrain = true,
    Effects = false
}

-- Variables
local sethiddenproperty = sethiddenproperty or set_hidden_property or set_hidden_prop
local Lighting = game:GetService("Lighting")
local Terrain = workspace.Terrain

-- Check if settings are valid and adjust render settings
local success, RenderSettings, UserGameSettings
if pcall(function()
    RenderSettings = game:GetService("RenderSettings")
    UserGameSettings = UserSettings():GetService("UserGameSettings")
end) then
    if Settings.Graphics then
        RenderSettings.EagerBulkExecution = false
        RenderSettings.QualityLevel = Enum.QualityLevel.Level01
        RenderSettings.MeshPartDetailLevel = Enum.MeshPartDetailLevel.Level01
        UserGameSettings.SavedQualityLevel = Enum.SavedQualitySetting.QualityLevel1
        workspace.InterpolationThrottling = Enum.InterpolationThrottlingMode.Enabled
    end
end

-- Adjust lighting settings
if Settings.Lighting then
    Lighting.GlobalShadows = false
    Lighting.FogEnd = 1e9

    if sethiddenproperty then
        pcall(sethiddenproperty, Lighting, "Technology", Enum.Technology.Compatibility)
    end
end

-- Adjust texture settings
if Settings.Texture then
    workspace.LevelOfDetail = Enum.ModelLevelOfDetail.Disabled

    if sethiddenproperty then
        pcall(sethiddenproperty, workspace, "MeshPartHeads", Enum.MeshPartHeads.Disabled)
    end
end

-- Adjust terrain settings
if Settings.Terrain then
    Terrain.WaterWaveSize = 0
    Terrain.WaterWaveSpeed = 0
    Terrain.WaterReflectance = 0
    Terrain.WaterTransparency = 0

    if sethiddenproperty then
        pcall(sethiddenproperty, Terrain, "Decoration", false)
    end
end

-- Iterate through all descendants and apply settings
for _, Object in ipairs(game:GetDescendants()) do
    if Object:IsA("Sky") and Settings.Texture then
        Object.StarCount = 0
        Object.CelestialBodiesShown = false
    elseif Object:IsA("BasePart") and Settings.Texture then
        Object.Material = "SmoothPlastic"
    elseif Object:IsA("BasePart") and Settings.Lighting then
        Object.CastShadow = false
    elseif Object:IsA("Atmosphere") and Settings.Lighting then
        Object.Density = 0
        Object.Offset = 0
        Object.Glare = 0
        Object.Haze = 0
    elseif Object:IsA("SurfaceAppearance") and Settings.Texture then
        Object:Destroy()
    elseif (Object:IsA("Decal") or Object:IsA("Texture")) and string.lower(Object.Parent.Name) ~= "head" and Settings.Texture then
        Object.Transparency = 1
    elseif (Object:IsA("ParticleEmitter") or Object:IsA("Sparkles") or Object:IsA("Smoke") or Object:IsA("Trail") or Object:IsA("Fire")) and Settings.Effects then
        Object.Enabled = false
    elseif (Object:IsA("ColorCorrectionEffect") or Object:IsA("DepthOfFieldEffect") or Object:IsA("SunRaysEffect") or Object:IsA("BloomEffect") or Object:IsA("BlurEffect")) and Settings.Lighting then
        Object.Enabled = false
    end
end

   end,
})

local Button = MiscTab:CreateButton({
   Name = "Anti Lag",
   Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/LiverMods/Tests/main/File/Antilag.lua"))()
   end,
})

-- Assuming you have the Rayfield module
local rayfieldUI = require(game:GetService("ReplicatedStorage"):WaitForChild("Rayfield")) -- Make sure this is the correct path to the Rayfield module

-- Create the text box UI element
local Input = MiscTab:CreateInput({
    Name = "custom name", -- This name can be changed based on your design
    PlaceholderText = "Enter your name here", -- Optional placeholder text
    Text = "", -- Start with an empty text
})

-- Listen for text change events when the player types in the box
nameInputBox:GetPropertyChangedSignal("Text"):Connect(function()
    local newName = nameInputBox.Text -- Get the updated name

    -- Loop through all players and update their name labels
    for _, player in pairs(game.Players:GetPlayers()) do
        local character = player.Character
        if character and character:FindFirstChild("Head") then
            local nameGui = character.Head:FindFirstChild("NameGui")
            if nameGui and nameGui:FindFirstChild("Main") then
                local nameLabel = nameGui.Main:FindFirstChild("Name")
                if nameLabel then
                    nameLabel.Text = newName -- Set the name to whatever the player typed
                end
            end
        end
    end
end)

-- Assuming this is inside a GUI context with Rayfield and a TextBox
local Rayfield = require(game:GetService("ReplicatedStorage"):WaitForChild("Rayfield")) -- Or wherever Rayfield is loaded from
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UpdatePlayerNameEvent = ReplicatedStorage:WaitForChild("UpdatePlayerName")

-- Create a new TextBox in the Rayfield UI (if not already created)
local Input = MiscTab:CreateInput({
    Name = "PlayerNameInput", -- Name of the textbox
    PlaceholderText = "Enter New Name", -- Placeholder text
    Text = "", -- Default text (blank initially)
    Size = UDim2.new(0, 200, 0, 40), -- Size of the textbox
    Position = UDim2.new(0.5, -100, 0.5, -20), -- Position of the textbox on screen
})

-- Function to send the new name to the server
local function sendNameToServer(newName)
    UpdatePlayerNameEvent:FireServer(newName)  -- Send the name change request to the server
end

-- Ensure the text box works
textbox:GetPropertyChangedSignal("Text"):Connect(function()
    local newName = textbox.Text
    if newName ~= "" then
        sendNameToServer(newName)  -- Call function to send the new name to the server
    end
end)
