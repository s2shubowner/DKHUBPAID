local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Ro Services v1 | Streetz Wars 2",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Loading...",
   LoadingSubtitle = "by DK",
   Theme = "Serenity", -- Check https://docs.sirius.menu/rayfield/configuration/themes

   DisableRayfieldPrompts = true,
   DisableBuildWarnings = true, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = false,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "dkshub", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Ro-key System",
      Subtitle = "Enter Key",
      Note = "Buy Key At Discord.gg/dkshub", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"https://pastebin.com/raw/q1r3esnP"}
   }
})

local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image
local MainSection = MainTab:CreateSection("Game Info")

local Paragraph = MainTab:CreateParagraph({Title = "Game Name", Content = "[VALENTINESðŸ’ž] Streetz War 2"})
local Paragraph = MainTab:CreateParagraph({Title = "Game id", Content = "11177482306"})

local MainSection = MainTab:CreateSection("Developer")
local Paragraph = MainTab:CreateParagraph({Title = "devs", Content = "Theyfwdk0"})

local AutofarmTab = Window:CreateTab("Autofarm", 4483362458) -- Title, Image
local AutofarmSection = AutofarmTab:CreateSection("Mop Autofarm")


local Toggle = AutofarmTab:CreateToggle({
    Name = "Mop Autofarm",
    CurrentValue = false,
    Flag = "MopAutofarm",
    Callback = function(state)
        _G.automopfarm = state
        while _G.automopfarm do
            for i, v in pairs(game.Workspace.CleanPart:GetChildren()) do
                if v.ProximityPrompt.Enabled == true then
                    game:GetService("ReplicatedStorage").GiveMop:FireServer()
                    v.ProximityPrompt.HoldDuration = 1
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.CFrame + Vector3.new(0, 2, 0)
                    wait(1)
                    fireproximityprompt(v.ProximityPrompt, v.ProximityPrompt.HoldDuration, false)
                    wait(v.ProximityPrompt.HoldDuration + 2.2)
                end
            end
        end
    end
})

local Section = AutofarmTab:CreateSection("Box Autofarm")

local Toggle = AutofarmTab:CreateToggle({
    Name = "Box Autofarm",
    CurrentValue = false,
    Flag = "BoxAutofarm",
    Callback = function(state)
        _G.autoboxfarm = state

        task.spawn(function()
            while _G.autoboxfarm do
                local oldpos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
                
                -- Move to the box location
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Job.Box.BOX1.CFrame
                wait(0.5)
                
                -- Pick up the box
                fireclickdetector(game.Workspace.Job.Box.BOX1.ClickDetector)
                wait(0.2)
                
                -- Move back to the old position
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldpos
                
                -- Equip the box
                game.Players.LocalPlayer.Backpack:WaitForChild("Box").Parent = game.Players.LocalPlayer.Character
                
                -- Drop the box at the job area
                firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 0)
                wait()
                firetouchinterest(game.Workspace.Job.Box.Job, game.Players.LocalPlayer.Character:FindFirstChildOfClass("Tool").Handle, 1)
                
                -- Wait for the job cooldown
                wait(15)
            end
        end)
    end
})

local AutofarmSection = AutofarmTab:CreateSection("Anti Afk")

local Button = AutofarmTab:CreateButton({
   Name = "Anti Afk",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local CardTab = Window:CreateTab("Card", 4483362458) -- Title, Image
local CardSection = CardTab:CreateSection("Card Dupe")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualInputManager = game:GetService("VirtualInputManager")
local player = Players.LocalPlayer

local dupeAmount = 10

-- Textbox for Duplication Amount
local inputField = CardTab:CreateInput({
    Name = "Enter Card Dupe Amount",
    PlaceholderText = "10",
    RemoveTextAfterFocusLost = false,
    Flag = "DupeAmount",
    Callback = function(value)
        dupeAmount = tonumber(value) or 10
        if dupeAmount <= 0 then
            dupeAmount = 10  -- Fallback value
        end
    end
})

-- Button to Start Duplication
local startButton = CardTab:CreateButton({
    Name = "Start Duplication",
    Text = "Start Duplication",
    Callback = function()
        if dupeAmount <= 0 then
            notify("Invalid dupe amount!", 5, "Error")
            return
        end

        -- Duplication Function
        startDuplication()
    end
})

-- Duplication Function
local function startDuplication()
    -- Start the duplication process
    notify("Buying cards & laptops...", 5, "Info")

    -- Open Dealer UI
    fireclickdetector(game.Workspace["Streetz War"].Anonymous.ClickDetector)
    wait(2) -- Wait to ensure the UI is open
    player.PlayerGui:WaitForChild("DealerGui")
    local shopGui = player.PlayerGui.DealerGui.ShopFrame
    shopGui.Visible = true
    player.PlayerGui.DealerGui.Frame.Visible = false
    game:GetService("RunService"):Set3dRenderingEnabled(false)

    -- Position player correctly
    repeat wait() until player.Character and player.Character:FindFirstChild("HumanoidRootPart")
    player.Character.HumanoidRootPart.CFrame = CFrame.new(-55, 4.5, 170)

    wait(0.5)

    -- Click buttons for purchasing
    local cardButton = shopGui["Blank Card"]
    local laptopButton = shopGui["laptop"]

    for i = 1, dupeAmount do
        task.wait()
        -- Click the card button
        if cardButton.Visible then
            local cardPos = cardButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(cardPos.X + 150, cardPos.Y + 60, 0, false, game, 0)
        end

        task.wait(0.1)

        -- Click the laptop button
        if laptopButton.Visible then
            local laptopPos = laptopButton.AbsolutePosition
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, true, game, 0)
            task.wait(0.1)
            VirtualInputManager:SendMouseButtonEvent(laptopPos.X + 150, laptopPos.Y + 60, 0, false, game, 0)
        end
    end

    game:GetService("RunService"):Set3dRenderingEnabled(true)

    -- Close the UI
    local exitButton = shopGui.exit
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, true, game, 0)
    wait()
    VirtualInputManager:SendMouseButtonEvent(exitButton.AbsolutePosition.X + 300, exitButton.AbsolutePosition.Y + 65, 0, false, game, 0)

    -- Move player to next step
    player.Character.HumanoidRootPart.CFrame = CFrame.new(954, 4.7, -61)
    wait(4)

    -- Process Laptops
    local laptopCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Laptop" then
            laptopCount = laptopCount + 1
        end
    end

    for i = 1, laptopCount - 1 do
        spawn(function()
            local args = { true, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(4)
    player.Backpack.Laptop.Parent = player.Character
    wait(4)

    -- Process Cards
    local cardCount = 0
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Loaded Card" then
            cardCount = cardCount + 1
        end
    end

    for i = 1, cardCount do
        spawn(function()
            local args = { false, "NEW123" }
            ReplicatedStorage.Assets.Other.GiverPunchmade:InvokeServer(unpack(args))
        end)
    end

    wait(1)
    notify("Duplication Complete!", 5, "Info")
    player.Character.Humanoid:UnequipTools()
end

-- Notification function with error handling
local function notify(message, time, type)
    local success, err = pcall(function()
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = type or "Info",
            Text = message,
            Duration = time or 5,
        })
    end)

    if not success then
        warn("Notification failed: " .. err)
    end
end

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image
local PlayerSection = PlayerTab:CreateSection("Speed")

local Slider = PlayerTab:CreateSlider({
   Name = "Walkspeed",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local PlayerSection = PlayerTab:CreateSection("Jump Power")

local Slider = PlayerTab:CreateSlider({
   Name = "JumpPower",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Height",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
   end,
})

local Toggle = PlayerTab:CreateToggle({
   Name = "Inf Jump",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        local InfiniteJumpEnabled = true
game:GetService("UserInputService").JumpRequest:connect(function()
if InfiniteJumpEnabled then
game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass'Humanoid':ChangeState("Jumping")
end
end)
   end,
})

local PlayerSection = PlayerTab:CreateSection("fly")

local Toggle = PlayerTab:CreateToggle({
   Name = "enable fly",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
   end,
})

local Slider = PlayerTab:CreateSlider({
   Name = "Fly Speed",
   Range = {0, 200},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 10,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the slider changes
   -- The variable (Value) is a number which correlates to the value the slider is currently at
   end,
})

local TeleportsTab = Window:CreateTab("Teleports", 4483362458) -- Title, Image
local TeleportsSection = TeleportsTab:CreateSection("Main Teleports")

-- Create a list of teleport options
local teleportOptions = {
    {Name = "Apartment 1", Position = CFrame.new(4, 4, 50)},
    {Name = "Apartment 2", Position = CFrame.new(2570, 4, -107)},
    {Name = "Gun Store", Position = CFrame.new(-276, 4, 30)},
    {Name = "Dealership", Position = CFrame.new(842, 5, -6)},
    {Name = "Pharmacy", Position = CFrame.new(42, 5, -258)},
    {Name = "Bank", Position = CFrame.new(-535, 5, -347)},
    {Name = "Cap Store", Position = CFrame.new(-159, 5, 8)},
    {Name = "Shit/Pant Store", Position = CFrame.new(-125, 5, 38)},
    {Name = "Chain Store", Position = CFrame.new(39, 5, -232)},
    {Name = "Boxing Gym", Position = CFrame.new(258, 5, -99)},
}

-- Create the dropdown menu for teleportation
local dropdown = TeleportsTab:CreateDropdown({
    Name = "Select a Teleport",
    Options = {},
    Callback = function(selectedTeleport)
        -- Find the corresponding teleport location based on selection
        for _, teleport in ipairs(teleportOptions) do
            if teleport.Name == selectedTeleport then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = teleport.Position
                break
            end
        end
    end
})

-- Add teleport options to the dropdown
for _, teleport in ipairs(teleportOptions) do
    dropdown:AddOption(teleport.Name)
end

-- Dealer Teleports Section
local TeleportsSection = TeleportsTab:CreateSection("Dealer Teleports")
local dealerTeleports = {
    {Name = "Card Dealer", Position = CFrame.new(226, 4, -543)},
    {Name = "Illeagal Dealer", Position = CFrame.new(-142, 5, 190)},
}

-- Create a second dropdown for Dealer teleports
local dealerDropdown = TeleportsTab:CreateDropdown({
    Name = "Select Dealer Teleport",
    Options = {},
    Callback = function(selectedTeleport)
        for _, teleport in ipairs(dealerTeleports) do
            if teleport.Name == selectedTeleport then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = teleport.Position
                break
            end
        end
    end
})

for _, teleport in ipairs(dealerTeleports) do
    dealerDropdown:AddOption(teleport.Name)
end

-- Job Teleports Section
local TeleportsSection = TeleportsTab:CreateSection("Job Teleports")
local jobTeleports = {
    {Name = "Mop Job", Position = CFrame.new(-102, 5, 20)},
    {Name = "Pizza Job", Position = CFrame.new(163, 5, 49)},
    {Name = "Box Job", Position = CFrame.new(-118, 5, 300)},
}

-- Create a third dropdown for Job teleports
local jobDropdown = TeleportsTab:CreateDropdown({
    Name = "Select Job Teleport",
    Options = {},
    Callback = function(selectedTeleport)
        for _, teleport in ipairs(jobTeleports) do
            if teleport.Name == selectedTeleport then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = teleport.Position
                break
            end
        end
    end
})

for _, teleport in ipairs(jobTeleports) do
    jobDropdown:AddOption(teleport.Name)
end

local teleportsSection = TeleportsTab:CreateSection("teleport to player")

local function teleportToPlayer(player)
    local char = game.Players.LocalPlayer.Character
    if char then
        -- Position the local player at the selected player's position
        char:SetPrimaryPartCFrame(player.Character.HumanoidRootPart.CFrame)
    end
end

local Dropdown = TeleportsTab:CreateDropdown({
    Name = "Select Player",
    List = {},  -- We will populate this list with player names
    Callback = function(selectedPlayer)
        -- Find the player from the selected name and teleport
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player.Name == selectedPlayer then
                teleportToPlayer(player)
                break
            end
        end
    end
})

-- Populate the dropdown with the current players in the game
local function updatePlayerList()
    local playerNames = {}
    for _, player in ipairs(game.Players:GetPlayers()) do
        table.insert(playerNames, player.Name)
    end
    playersDropdown:SetList(playerNames)
end

-- Update the dropdown when a player joins or leaves
game.Players.PlayerAdded:Connect(updatePlayerList)
game.Players.PlayerRemoving:Connect(updatePlayerList)

-- Initial update of the player list when the script is first run
updatePlayerList()
